import { Telegraf } from 'telegraf';
import { GoogleGenerativeAI, HarmBlockThreshold, HarmCategory } from "@google/generative-ai";
import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();

// --- Constants ---

// Define the available models. Keys are the command names (without '/'), values are the actual Model IDs for the API.
// WARNING: Ensure these Model IDs are valid and accessible with your API Key.
// Using the exact names provided, but some might be experimental or non-existent.
const ALLOWED_MODELS = {
    // Command Key             ->  Model ID for Google API
    "gemini15flash":         "gemini-1.5-flash",         // Stable Flash model
    "gemini20flash":         "gemini-2.0-flash",
    "gemini20flashlite":    "gemini-2.0-flash-lite",
    "gemini25proexp0325": "gemini-2.5-pro-exp-03-25",
};

// Define the KEY (from ALLOWED_MODELS) for the default model
// Make sure this key exists in ALLOWED_MODELS
const DEFAULT_MODEL_KEY = "gemini20flash";
// Ensure fallback uses a known valid key if the default key is somehow wrong or model unavailable
const DEFAULT_MODEL_ID = ALLOWED_MODELS[DEFAULT_MODEL_KEY] || Object.values(ALLOWED_MODELS)[0] || "gemini-1.5-flash";

// Generate the list of commands for help text and registration
const MODEL_COMMANDS = Object.keys(ALLOWED_MODELS).map(cmd => `/${cmd}`);
const EDIT_THROTTLE_MS = 1500; // Throttle edits to avoid Telegram limits

// --- Gemini Setup ---
const genAI = new GoogleGenerativeAI(process.env.API_KEY);
const SAFETY_SETTINGS = [
    { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },
    { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },
    { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_NONE },
    { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_NONE },
];

// Function to get the model instance based on the command key
function getModelInstance(modelKey = DEFAULT_MODEL_KEY) {
    // Look up the ID using the key, fallback to default key if invalid key provided
    const requestedModelId = ALLOWED_MODELS[modelKey];
    const defaultModelIdToUse = ALLOWED_MODELS[DEFAULT_MODEL_KEY] || Object.values(ALLOWED_MODELS)[0] || "gemini-1.5-flash"; // Safest fallback
    const modelId = requestedModelId || defaultModelIdToUse;
    const effectiveKey = requestedModelId ? modelKey : DEFAULT_MODEL_KEY; // Log the key that led to the modelId

    console.log(`Attempting to use model ID: ${modelId} (selected key: ${effectiveKey})`);
    try {
        // Check if modelId is actually defined before proceeding
        if (!modelId) {
             throw new Error(`Model ID is undefined for key ${effectiveKey}`);
        }
        return genAI.getGenerativeModel({
            model: modelId,
            safetySettings: SAFETY_SETTINGS,
            // generationConfig: { temperature: 0.7 } // Optional: Add if needed
        });
    } catch (error) {
        console.error(`Failed to get model instance for ID: ${modelId} (key: ${effectiveKey})`, error);
        // Fallback to the determined safe default model instance
        console.warn(`Falling back to default model: ${defaultModelIdToUse}`);
        return genAI.getGenerativeModel({
            model: defaultModelIdToUse,
            safetySettings: SAFETY_SETTINGS,
        });
    }
}

// --- User and State Management ---

// --- >>>> START MULTI-USER CHANGE <<<< ---
// –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É ID –∏–∑ .env, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–ø—è—Ç—ã–º–∏
const allowedUserIdsString = process.env.ALLOWED_USER_IDS || '';

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (ID)
const allowedUserIds = allowedUserIdsString
    .split(',') // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
    .map(id => id.trim()) // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ ID
    .filter(id => id.length > 0) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –±—ã–ª–∏ –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ)
    .map(id => parseInt(id, 10)) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
    .filter(id => !isNaN(id)); // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ

// –î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Set
const allowedUserIdsSet = new Set(allowedUserIds);

if (allowedUserIdsSet.size === 0) {
    console.warn("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ALLOWED_USER_IDS –≤ .env) –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω! –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∏–∫–æ–º—É.");
} else {
    // –≠—Ç–æ—Ç –ª–æ–≥ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ –±–ª–æ–∫–µ bot.launch()
}
// --- >>>> END MULTI-USER CHANGE <<<< ---


// Store history and user settings (Map<userId, { history: Array<any>, currentModelKey: string }>)
const userState = new Map();

function getUserState(userId) {
    if (!userState.has(userId)) {
        // Store the KEY of the model, not the ID
        userState.set(userId, { history: [], currentModelKey: DEFAULT_MODEL_KEY });
    }
    return userState.get(userId);
}

function clearConversationHistory(userId) {
    const state = getUserState(userId);
    state.history = []; // Only clear history, keep model setting
    console.log(`–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—á–∏—â–µ–Ω–∞.`);
}

function addMessageToHistory(userId, role, content) {
    const state = getUserState(userId);
    // Optional: Limit history size
    // const MAX_HISTORY_LENGTH = 20;
    // if (state.history.length >= MAX_HISTORY_LENGTH) {
    //     state.history.splice(0, state.history.length - MAX_HISTORY_LENGTH + 1);
    // }
    state.history.push({ role, parts: content });
}

function setUserModel(userId, modelCommand) {
    const modelKey = modelCommand.startsWith('/') ? modelCommand.substring(1) : modelCommand;
    if (ALLOWED_MODELS[modelKey]) { // Check if the key exists in our allowed models
        const state = getUserState(userId);
        state.currentModelKey = modelKey; // Store the validated command key
        const modelId = ALLOWED_MODELS[modelKey]; // Get the corresponding ID
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –º–æ–¥–µ–ª—å: ${modelId} (–∫–æ–º–∞–Ω–¥–∞ /${modelKey})`);
        // Verify the model instance can be created (optional, but good check)
        try {
            getModelInstance(modelKey); // Try creating it
        } catch (verificationError) {
            // Error already logged in getModelInstance
            return null; // Indicate failure if verification fails
        }
        return modelId; // Return the model ID for confirmation message
    }
    console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –º–æ–¥–µ–ª–∏: ${modelKey} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return null; // Indicate failure
}

// --- Telegraf Bot Setup ---
const bot = new Telegraf(process.env.BOT_TOKEN);

// --- Middleware for Access Control ---
// --- >>>> START MULTI-USER CHANGE <<<< ---
bot.use((ctx, next) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–º –Ω–∞–±–æ—Ä–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID
    if (ctx.from && allowedUserIdsSet.has(ctx.from.id)) {
        // ID –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
        return next();
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    console.log(`–ó–∞–ø—Ä–æ—Å –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from?.id} (${ctx.from?.username})`);
    if (ctx.message || ctx.callback_query) {
        // –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –ª–æ–≥–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è)
        return ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.");
    }
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É)
});
// --- >>>> END MULTI-USER CHANGE <<<< ---

// --- Bot Commands ---

bot.start((ctx) => {
    const state = getUserState(ctx.from.id);
    // Look up the current model ID using the stored key
    const currentModelId = ALLOWED_MODELS[state.currentModelKey] || DEFAULT_MODEL_ID;
    ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ Gemini (—Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${currentModelId}).
–°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ! –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞—É–¥–∏–æ.
–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`);
});

bot.command('clear', (ctx) => {
    clearConversationHistory(ctx.from.id);
    ctx.reply("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.");
});

bot.command('help', (ctx) => {
    const state = getUserState(ctx.from.id);
    // Look up the current model ID using the stored key for display
    const currentModelId = ALLOWED_MODELS[state.currentModelKey] || DEFAULT_MODEL_ID;
    let helpText = `ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n`;
    helpText += `/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n`;
    helpText += `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n`;
    helpText += `*–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ Gemini:*\n`;
    MODEL_COMMANDS.forEach(cmd => {
        const commandKey = cmd.substring(1); // e.g., "gemini15flash"
        const modelId = ALLOWED_MODELS[commandKey] || 'N/A'; // Get the ID for display, fallback N/A
        // Compare the stored key with the current command's key
        const isCurrent = state.currentModelKey === commandKey;
        helpText += `${cmd} - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º–æ–¥–µ–ª—å ${modelId}${isCurrent ? ' *(—Ç–µ–∫—É—â–∞—è)*' : ''}\n`;
    });
    helpText += `\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: *${currentModelId}*`; // Display the ID

    ctx.replyWithMarkdown(helpText);
});

// --- Model Switching Commands ---
MODEL_COMMANDS.forEach(command => {
    const commandKey = command.substring(1); // Get the key like "gemini15flash"
    bot.command(commandKey, (ctx) => { // Register the command using the key
        const userId = ctx.from.id;
        const chosenModelId = setUserModel(userId, commandKey); // Pass the key directly
        if (chosenModelId) {
            ctx.reply(`‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: ${chosenModelId}`);
        } else {
             // Error trying to set the model (e.g., invalid ID from getModelInstance check)
             const failedModelIdAttempt = ALLOWED_MODELS[commandKey] || commandKey; // Show what was attempted
             ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º–æ–¥–µ–ª—å —Å ID "${failedModelIdAttempt}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –∏–ª–∏ API –∫–ª—é—á. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ ${DEFAULT_MODEL_ID}.`);
             // Revert to default if setting failed
             try {
                const state = getUserState(userId);
                state.currentModelKey = DEFAULT_MODEL_KEY;
             } catch (stateError) {
                console.error("Error reverting state to default after failed model switch:", stateError);
             }
        }
    });
});


// --- Streaming Function ---
async function streamAndEditResponse(ctx, stream, initialMessageId) {
    let fullResponseText = '';
    let lastSentText = '...'; // Text in the sent message placeholder
    let editTimeoutId = null;
    let lastEditTime = 0;
    let editAttemptScheduled = false; // Flag to track if an edit is pending

    const editMessage = async (textToEdit) => {
        editAttemptScheduled = false; // Mark attempt as happening/done
        const cleanText = textToEdit.trim();
        // Only edit if clean text is not empty and differs from the last sent text
        if (cleanText && cleanText !== lastSentText) {
            try {
                await ctx.telegram.editMessageText(ctx.chat.id, initialMessageId, null, cleanText);
                lastSentText = cleanText; // Update last sent text on success
                lastEditTime = Date.now();
                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${initialMessageId} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.`);
            } catch (error) {
                if (error.response && error.response.error_code === 429) {
                    console.warn(`–û—à–∏–±–∫–∞ 429 (Too Many Requests) –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${initialMessageId}. –¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ.`);
                    // Don't update lastSentText, let the next attempt send the fuller text
                    // Reschedule the edit slightly later? Or rely on the next chunk/final edit.
                    // For now, we'll rely on the next chunk triggering a new attempt.
                    editAttemptScheduled = true; // Indicate we need to try again
                } else if (error.message.includes('message is not modified')) {
                     console.warn(`–°–æ–æ–±—â–µ–Ω–∏–µ ${initialMessageId} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (API 400), –ø—Ä–æ–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`);
                     lastSentText = cleanText; // Assume it's sent to avoid re-trying the same text
                     lastEditTime = Date.now();
                } else if (error.message.includes('message to edit not found')) {
                    console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ ${initialMessageId} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–æ). –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`);
                    throw error; // Propagate error to stop the streaming loop for this message
                } else {
                    console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${initialMessageId}:`, error);
                    // Log error but potentially allow further edits
                }
            }
        }
        // Only clear timeout ID if the edit wasn't rate-limited and needs rescheduling
        if (!editAttemptScheduled) {
            editTimeoutId = null;
        }
    };

    try {
        for await (const chunk of stream) {
            const chunkText = chunk.text();
            if (chunkText) {
                fullResponseText += chunkText;
            }

            // If an edit isn't already scheduled or pending retry, schedule one
            if (!editAttemptScheduled) {
                // Clear any previously scheduled timeout (e.g., if chunks arrive fast)
                if (editTimeoutId) {
                    clearTimeout(editTimeoutId);
                }

                const timeSinceLastEdit = Date.now() - lastEditTime;
                const delay = Math.max(0, EDIT_THROTTLE_MS - timeSinceLastEdit);

                editAttemptScheduled = true; // Mark that we are scheduling an attempt
                editTimeoutId = setTimeout(() => {
                    editMessage(fullResponseText).catch(err => {
                        console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º editMessage:", err);
                        // If message not found, stream loop will break via propagated error
                        // If other error, reset flag to allow next chunk to try again
                        if (!err.message?.includes('message to edit not found')) {
                           editAttemptScheduled = false; // Allow scheduling again
                        }
                    });
                }, delay);
            }
        }

        // Stream finished. Handle final edit.

        // If an edit was scheduled but hasn't run yet, clear timeout and run immediately.
        if (editTimeoutId) {
            clearTimeout(editTimeoutId);
            editTimeoutId = null;
            console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ${initialMessageId} –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞.`);
            // Wait for the final edit to complete or fail
            await editMessage(fullResponseText);
        }
        // If the last attempt failed (e.g., 429) or text changed since last success, try one last time.
        else if (fullResponseText.trim() && fullResponseText.trim() !== lastSentText) {
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è) –¥–ª—è ${initialMessageId}.`);
            await editMessage(fullResponseText);
        } else {
            console.log(`–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ${initialMessageId} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`);
        }

    } catch (streamError) {
        if (streamError.message.includes('message to edit not found')) {
            // Already logged in editMessage, just stop.
        } else {
            console.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:", streamError);
            fullResponseText += "\n\n[–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞]";
            try {
                // Attempt to edit the message to show the stream error
                await ctx.telegram.editMessageText(ctx.chat.id, initialMessageId, null, fullResponseText.trim());
            } catch (editError) {
                 if (!editError.message.includes('message to edit not found')) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ —Å—Ç—Ä–∏–º–∞:", editError);
                 }
            }
        }
    }

    // Return the full text, even if editing failed, for history
    return fullResponseText.trim();
}


// --- Message Handlers ---

bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const userMessage = ctx.message.text;

    // Ignore commands
    if (userMessage.startsWith('/')) {
        // Check if it's NOT a model command (already handled) or other known commands
        const knownCommands = ['/start', '/clear', '/help', ...MODEL_COMMANDS];
        if (!knownCommands.includes(userMessage.split(' ')[0])) {
             ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }
        return;
    }


    const userCtxState = getUserState(userId);
    addMessageToHistory(userId, "user", [{ text: userMessage }]);

    let sentMessage;
    try {
        sentMessage = await ctx.reply("..."); // Send placeholder message
        const messageId = sentMessage.message_id;

        // Get the correct model instance based on user's current setting
        const currentModel = getModelInstance(userCtxState.currentModelKey);

        // Start a chat session with history EXCLUDING the current user message
        const chat = currentModel.startChat({
            history: userCtxState.history.slice(0, -1),
        });

        // Send only the current user message to continue the chat
        const result = await chat.sendMessageStream(userMessage);

        // Stream the response and edit the placeholder message
        const finalResponseText = await streamAndEditResponse(ctx, result.stream, messageId);

        // Add the final model response to history if it's not empty
        if (finalResponseText) {
            addMessageToHistory(userId, "model", [{ text: finalResponseText }]);
        } else {
             console.warn("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
             addMessageToHistory(userId, "model", [{ text: "[–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏]" }]);
             try {
                 // Edit placeholder to indicate failure
                 await ctx.telegram.editMessageText(ctx.chat.id, messageId, null, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.");
             } catch (e) {
                 if (!e.message?.includes('message to edit not found')) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (—Ç–µ–∫—Å—Ç):", e);
                 }
             }
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        const errorText = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ú–æ–¥–µ–ª—å: ${ALLOWED_MODELS[userCtxState.currentModelKey] || DEFAULT_MODEL_ID}. –û—à–∏–±–∫–∞: ${error.message || error}`;
        // Remove the failed user message from history
        if (userCtxState.history.length > 0 && userCtxState.history[userCtxState.history.length - 1].role === 'user') {
            userCtxState.history.pop();
        }
        if (sentMessage) {
            try {
                await ctx.telegram.editMessageText(ctx.chat.id, sentMessage.message_id, null, errorText);
            } catch (editError) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏:", editError);
                // Send as new message if editing failed (and original wasn't deleted)
                if (!editError.message?.includes('message to edit not found')) {
                    await ctx.reply(errorText);
                }
            }
        } else {
            await ctx.reply(errorText); // If sending placeholder failed
        }
    }
});

// --- File Handlers ---

// Helper function to fetch file buffer from Telegram
async function getFileBuffer(ctx, fileId) {
    const fileLink = await ctx.telegram.getFileLink(fileId);
    const response = await fetch(fileLink);
    if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (${response.status}): ${response.statusText}`);
    }
    const arrayBuffer = await response.arrayBuffer();
    return Buffer.from(arrayBuffer);
}

// General file handler function
async function handleFile(ctx, fileId, mimeType, userPrompt, fileTypeName, fileName = '') {
    const userId = ctx.from.id;
    const userCtxState = getUserState(userId);
    let sentMessage;

    // Add user request (prompt + placeholder for file data) to history FIRST
    // The actual file data will be sent in the API request, not stored in history map
    const placeholderPart = { text: `[${fileTypeName} ${fileName || ''} received, processing...]` }; // Ensure fileName exists
    addMessageToHistory(userId, "user", [{ text: userPrompt }, placeholderPart]);

    try {
        sentMessage = await ctx.reply(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${fileTypeName} ${fileName}...`);
        const messageId = sentMessage.message_id;

        // Download the file content
        const buffer = await getFileBuffer(ctx, fileId);
        const filePart = {
            inlineData: { data: buffer.toString("base64"), mimeType: mimeType }
        };

        // Get the correct model instance
        const currentModel = getModelInstance(userCtxState.currentModelKey);

        // Prepare the request content for generateContentStream
        // Send the entire history including the user prompt + the actual file part
        const currentRequestContent = { role: 'user', parts: [{ text: userPrompt }, filePart] };
        const requestContent = {
             // History excluding the placeholder message we added
             contents: [...userCtxState.history.slice(0, -1), currentRequestContent]
        };

        // Call generateContentStream
        const result = await currentModel.generateContentStream(requestContent);

        // Stream the response and edit the message
        const finalResponseText = await streamAndEditResponse(ctx, result.stream, messageId);

        // Add successful model response to history
        if (finalResponseText) {
            addMessageToHistory(userId, "model", [{ text: finalResponseText }]);
        } else {
            console.warn(`–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è ${fileTypeName} ${fileName}.`);
            addMessageToHistory(userId, "model", [{ text: "[–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏]" }]);
            try {
                await ctx.telegram.editMessageText(ctx.chat.id, messageId, null, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${fileTypeName} ${fileName}.`);
            } catch (e) {
                 if (!e.message?.includes('message to edit not found')) {
                     console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (${fileTypeName}):`, e);
                 }
            }
        }

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fileTypeName} ${fileName}:`, error);
        const errorText = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fileTypeName} ${fileName}. –ú–æ–¥–µ–ª—å: ${ALLOWED_MODELS[userCtxState.currentModelKey] || DEFAULT_MODEL_ID}. –û—à–∏–±–∫–∞: ${error.message || error}`;
        // Remove the failed user message (with placeholder) from history
        if (userCtxState.history.length > 0 && userCtxState.history[userCtxState.history.length - 1].role === 'user') {
            userCtxState.history.pop();
        }
         if (sentMessage) {
            try {
                await ctx.telegram.editMessageText(ctx.chat.id, sentMessage.message_id, null, errorText);
            } catch (editError) {
                 console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏:", editError);
                 if (!editError.message?.includes('message to edit not found')) {
                    await ctx.reply(errorText);
                 }
            }
        } else {
            await ctx.reply(errorText); // If sending placeholder failed
        }
    }
}

// Specific file type listeners
bot.on('photo', async (ctx) => {
    // Use the highest resolution photo
    const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    const mimeType = 'image/jpeg'; // Assume JPEG for Telegram photos
    const userPrompt = ctx.message.caption || " ";
    await handleFile(ctx, fileId, mimeType, userPrompt, "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
});

// List of supported MIME types for documents (adjust as needed)
const supportedMimeTypes = [
    'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'text/csv',
    'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // doc, docx
    'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // xls, xlsx
    // Add video/audio types if needed and supported by the Gemini model
    'audio/mpeg', 'audio/ogg', 'audio/wav', // Common audio formats
    // 'video/mp4', 'video/quicktime', // Common video formats - uncomment if needed
];

bot.on('document', async (ctx) => {
    const fileId = ctx.message.document.file_id;
    const mimeType = ctx.message.document.mime_type;
    const fileName = ctx.message.document.file_name || '–¥–æ–∫—É–º–µ–Ω—Ç';

    if (!mimeType || !supportedMimeTypes.includes(mimeType)) {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${mimeType} (${fileName})`);
        return ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–∞–π–ª—ã (${fileName}) —Å MIME-—Ç–∏–ø–æ–º: ${mimeType || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: ${supportedMimeTypes.join(', ')}`);
    }

    const userPrompt = ctx.message.caption || `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ "${fileName}".`;
    await handleFile(ctx, fileId, mimeType, userPrompt, "–¥–æ–∫—É–º–µ–Ω—Ç", `"${fileName}"`);
});

bot.on('voice', async (ctx) => {
    const fileId = ctx.message.voice.file_id;
    // Telegram voice messages are often opus in ogg container
    const mimeType = ctx.message.voice.mime_type || 'audio/ogg';
    const userPrompt = " "; // Changed prompt to be more specific
    await handleFile(ctx, fileId, mimeType, userPrompt, "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
});

// --- Error Handling and Restart Logic ---

let consecutiveCrashCount = 0;
const MAX_CONSECUTIVE_CRASHES = 5;
let lastCrashTime = 0;

const handleCriticalError = (error, origin) => {
    console.error(`\n====================================`);
    console.error(`CRITICAL ERROR DETECTED (${origin})`);
    console.error(`Time: ${new Date().toISOString()}`);
    console.error(error.stack || error);
    console.error(`====================================\n`);


    const now = Date.now();
    // Reset counter if the last crash was more than a minute ago
    if (now - lastCrashTime > 60000) {
        consecutiveCrashCount = 0;
    }

    lastCrashTime = now;
    consecutiveCrashCount++;

    console.error(`Consecutive crash count: ${consecutiveCrashCount}/${MAX_CONSECUTIVE_CRASHES}`);

    if (consecutiveCrashCount >= MAX_CONSECUTIVE_CRASHES) {
        console.error(`Max consecutive crash limit reached. Forcing shutdown (exit code 0). PM2 should NOT restart.`);
        // Attempt graceful stop, then exit with 0
        bot.stop('CRITICAL_ERROR_LIMIT');
        setTimeout(() => process.exit(0), 1500);
    } else {
        console.error('Attempting graceful shutdown for restart (exit code 1). PM2 should restart.');
        // Attempt graceful stop, then exit with 1
        bot.stop('CRITICAL_ERROR_RESTART');
        setTimeout(() => process.exit(1), 1500); // Give time for stop signal
    }
};

// Catch unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise);
    handleCriticalError(reason instanceof Error ? reason : new Error(String(reason)), 'unhandledRejection');
});

// Catch uncaught exceptions
process.on('uncaughtException', (err, origin) => {
    console.error('Uncaught Exception:', origin);
    handleCriticalError(err, origin);
});


// --- Bot Launch ---
bot.launch().then(() => {
    console.log('------------------------------------');
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    // --- >>>> START MULTI-USER CHANGE <<<< ---
    // Display resolved user IDs at launch
    if (allowedUserIdsSet.size > 0) {
        console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID): ${[...allowedUserIdsSet].join(', ')}`);
    } else {
         console.warn("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ALLOWED_USER_IDS –≤ .env) –ø—É—Å—Ç!");
    }
    // --- >>>> END MULTI-USER CHANGE <<<< ---
    console.log(`–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${DEFAULT_MODEL_ID} (–∫–ª—é—á: ${DEFAULT_MODEL_KEY})`);
    console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–∫–æ–º–∞–Ω–¥—ã):`);
    MODEL_COMMANDS.forEach(cmd => {
        const key = cmd.substring(1);
        console.log(`  ${cmd} -> ${ALLOWED_MODELS[key] || 'N/A'}`); // Added fallback for safety
    });
    console.log('–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');
    console.log('------------------------------------');
    consecutiveCrashCount = 0; // Reset crash count on successful launch
}).catch(err => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
    handleCriticalError(err, 'botLaunch'); // Trigger restart logic if launch fails
});

// --- Graceful Shutdown Signals ---
const gracefulStop = (signal) => {
     console.log(`\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
     // pm2 sends SIGINT, nodemon sends SIGUSR2, etc.
     bot.stop(signal);
     console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
     process.exit(0); // Exit cleanly
};

process.once('SIGINT', () => gracefulStop('SIGINT'));
process.once('SIGTERM', () => gracefulStop('SIGTERM'));
process.once('SIGUSR2', () => gracefulStop('SIGUSR2')); // Often used by nodemon

console.log("--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é... ---");

/*
--- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å PM2 –¥–ª—è –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç–∞ ---

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PM2 –≥–ª–æ–±–∞–ª—å–Ω–æ:
   npm install pm2 -g

2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª ecosystem.config.cjs (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .cjs –µ—Å–ª–∏ package.json –∏–º–µ–µ—Ç "type": "module"):

   module.exports = {
     apps : [{
       name: 'gemini-bot',       // –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ PM2
       script: 'bot.js',         // –ò–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–æ–º –±–æ—Ç–∞
       instances: 1,             // –ó–∞–ø—É—Å–∫–∞—Ç—å –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
       autorestart: true,        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ (exit code != 0)
       watch: false,             // –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: true)
       max_memory_restart: '512M', // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å—ä–µ—Å—Ç > 512MB RAM
       // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤:
       max_restarts: 5,          // –ú–∞–∫—Å. –∫–æ–ª-–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
       min_uptime: '60s',        // –°—á–∏—Ç–∞—Ç—å –∑–∞–ø—É—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª 60 —Å–µ–∫—É–Ω–¥
       restart_delay: 5000,      // –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
       // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
       // output: './logs/out.log',
       // error: './logs/error.log',
       // log_date_format: 'YYYY-MM-DD HH:mm:ss Z'
     }]
   };

3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é PM2 –∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
   pm2 start ecosystem.config.cjs

4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
   pm2 list                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
   pm2 monit               # –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   pm2 logs gemini-bot     # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞

5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
   pm2 restart gemini-bot  # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
   pm2 stop gemini-bot     # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
   pm2 delete gemini-bot   # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ PM2

6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ PM2 –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):
   pm2 startup             # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∞—à–µ–π –û–°
   # –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
   pm2 save                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞

PM2 –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –∫–æ–¥–æ–º 1 (–∫–∞–∫ –≤ handleCriticalError).
–ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –∫–æ–¥–æ–º 0 (—á–∏—Å—Ç—ã–π –≤—ã—Ö–æ–¥ –∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ MAX_CONSECUTIVE_CRASHES), PM2 –µ–≥–æ –ù–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç.
*/